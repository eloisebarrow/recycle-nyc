{"version":3,"sources":["components/Footer.js","components/Header.js","components/About.js","components/ByBorough.js","components/NearYou.js","components/Resources.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","id","onClick","window","scrollTo","Header","src","alt","class","to","About","ByBorough","props","React","useState","borough","setBorough","boroughData","apiData","filter","d","map","i","park_site_name","address","key","onChange","e","target","value","name","NearYou","setViewport","viewport","setState","state","mapStyle","width","height","latitude","longitude","zoom","located","bins","this","filteredCoords","bin","Math","pow","mapboxAccessToken","process","MapboxAccessToken","onViewportChange","lat","parseFloat","lon","positionOptions","enableHighAccuracy","trackUserLocation","Component","Resources","Main","data","makeApiCall","a","axios","get","response","path","render","exact","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.741ccc0e.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css';\n\nconst Footer = () => {\n  const handleClick = () => {\n    window.scrollTo(0,0);\n  }\n\n  return (\n    <footer className=\"footer-styles\">\n      <p id=\"p-footer\" onClick={handleClick}>to top</p>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport '../App.css'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n  return (\n    <header className='header-styles'>\n      <img src=\"https://res.cloudinary.com/eloise/image/upload/v1567019346/recycling_vd5cly.png\" className=\"recycle-logo\" alt=\"Recycle\"/>\n      <h1 id=\"title\">Recycle NYC</h1>\n      <div className='hamburger'>\n        <i class=\"fas fa-bars\"></i>\n\n      </div>\n      <ul className='ul-styles'>\n        <li><Link className='link-styles' to=\"/\">home</Link></li>\n        <li><Link className='link-styles' to=\"/about\">about</Link></li>\n        <li><Link className='link-styles' to=\"/resources\">resources</Link></li>\n        <li><Link className='link-styles' to=\"/by-borough\">by borough</Link></li>\n        <li><Link className='link-styles' to=\"/near-you\">near you</Link></li>\n      </ul>\n      <h3 className='headline'>Waste not, want not: find a public recycling bin near you!</h3>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport '../App.css'\n\nconst About = () => {\n  return (\n    <div className=\"about\">\n      <p className=\"about-content\">Click the links above to find public recycling bins near you. You can also filter listings by borough and find additional resources above.</p>\n    </div>\n  )\n}\n\nexport default About\n","import React from 'react'\nimport '../App.css'\n\nconst ByBorough = (props) => {\n  const [borough, setBorough] = React.useState(null);\n\n  const boroughData = props.apiData\n    .filter((d) => d.borough === borough)\n    .map((d, i) => {\n      if (d.park_site_name !== d.address) {\n        return (\n          <div\n          key={i}\n          className=\"borough-data-styles\">\n            <p className=\"borough-content\">{d.park_site_name} <br/><span className=\"borough-category\">@</span> {d.address}</p>\n          </div>\n        )\n      }\n        else if (d.park_site_name == d.address ) {\n          return (\n            <div\n            key={i}\n            className=\"borough-data-styles\">\n              <p className=\"borough-content\">{d.address}</p>\n            </div>\n          )\n        }\n      })\n  return (\n    <div>\n      <h2>View recycling bins by borough</h2>\n      <select className=\"borough-dropdown\" onChange={(e) => setBorough(e.target.value)} name=\"boroughs\" id=\"boroughs\">\n        <option value=\"null\">Choose Your Borough</option>\n        <option value=\"Bronx\">Bronx</option>\n        <option value=\"Brooklyn\">Brooklyn</option>\n        <option value=\"Manhattan\">Manhattan</option>\n        <option value=\"Queens\">Queens</option>\n        <option value=\"Staten Island\">Staten Island</option>\n      </select>\n\n      <div className=\"boroughs-main\">\n        {boroughData}\n      </div>\n    </div>\n  )\n}\n\nexport default ByBorough\n","import React from 'react';\nimport '../App.css';\nimport ReactMapGL, { Marker, GeolocateControl } from 'react-map-gl';\n\nclass NearYou extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mapStyle: '',\n      viewport: {\n        width: 700,\n        height: 700,\n        latitude: 40.7401135,\n        longitude: -73.98973769999999,\n        zoom: 12,\n      },\n      located: false,\n      bins: [],\n    }\n  }\n\n  setViewport = (viewport) => {\n    this.setState({ viewport })\n  }\n\n  componentDidMount() {\n    this.setState({\n      located: true,\n    })\n  }\n\n  render() {\n    const filteredCoords = this.props.apiData.filter( bin => (Math.pow(bin.latitude, 2) * Math.pow(bin.longitude, 2)) > 1);\n\n    return (\n      <div className=\"map\">\n        <h2>Public recycling bins near you:</h2>\n        {this.state.located && <ReactMapGL\n          mapStyle=\"mapbox://styles/eloisebarrow/cjzu271jb11xx1ck0q3wwz1je\"\n          {...this.state.viewport}\n          mapboxAccessToken={process.env.MapboxAccessToken}\n          onViewportChange={this.setViewport}\n           >\n           {filteredCoords.map((d,i) => {\n             let lat = parseFloat(d.latitude);\n             let lon = parseFloat(d.longitude);\n             return (\n               <Marker key={i}\n               latitude={lat}\n               longitude={lon}\n               >\n               </Marker>\n             )\n           }) }\n           <GeolocateControl\n           className=\"geolocator\"\n           positionOptions={{enableHighAccuracy: true}}\n           trackUserLocation={true} />\n        </ReactMapGL> }\n      </div>\n    )\n  }\n}\n\nexport default NearYou\n","import React from 'react'\nimport '../App.css'\n\nconst Resources = () => {\n  return (\n    <h1>This is Resources</h1>\n  )\n}\n\nexport default Resources\n","import React from 'react'\nimport '../App.css';\nimport { Route, Switch } from 'react-router-dom'\nimport axios from 'axios'\nimport About from './About'\nimport ByBorough from './ByBorough'\nimport NearYou from './NearYou'\nimport Resources from './Resources'\n\nclass Main extends React.Component {\n  state = {\n    data: [],\n  }\n\n  makeApiCall = async () => {\n    const response = await axios.get('https://data.cityofnewyork.us/resource/sxx4-xhzg.json')\n    const data = response.data;\n    this.setState({\n      data\n    })\n  }\n\n  componentDidMount() {\n    this.makeApiCall();\n  }\n\n  render() {\n    return (\n      <div className=\"main-div-styles\">\n        <Switch>\n          <Route path=\"/about\" render={() => <About />}></Route>\n          <Route path=\"/resources\" render={() => <Resources />}></Route>\n          <Route path=\"/by-borough\" render={() => <ByBorough apiData={this.state.data}\n          borough={'Staten Island'} />}></Route>\n          <Route path=\"/near-you\" render={() => <NearYou apiData={this.state.data} />}></Route>\n          <Route exact path=\"/\"></Route>\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React from 'react';\nimport './App.css';\nimport Footer from './components/Footer'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport { Route } from 'react-router-dom'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n        <Route path=\"/\" render={() => <Footer />}></Route>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}